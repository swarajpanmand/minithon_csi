import { uniqueId } from '@antv/util';
import { LineLayer } from '@antv/l7';
import { PlotLayer } from '../../core/layer/plot-layer';
import { mappingLayer } from './adaptor';
import { getColorLegendItems } from '../dot-layer/helper';
const DEFAULT_OPTIONS = {};
const LAYER_OPTIONS_KEYS = ['shape', 'color', 'size', 'style', 'state', 'animate'];
export class LinesLayer extends PlotLayer {
    constructor(options) {
        super(options);
        /**
         * 图层类型
         */
        this.type = PlotLayer.LayerType.LinesLayer;
        /**
         * 图层是否具有交互属性
         */
        this.interaction = true;
        const { name, source } = this.options;
        const config = this.pickLayerConfig(this.options);
        this.name = name ? name : uniqueId(this.type);
        this.layer = new LineLayer(Object.assign(Object.assign({}, config), { name: this.name }));
        this.mappingLayer(this.layer, this.options);
        this.setSource(source);
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return DEFAULT_OPTIONS;
    }
    mappingLayer(layer, options) {
        mappingLayer(layer, options);
    }
    update(options) {
        super.update(options);
        this.mappingLayer(this.layer, this.options);
    }
    getColorLegendItems() {
        const colorLegendItems = this.layer.getLegendItems('color');
        if (Array.isArray(colorLegendItems) && colorLegendItems.length !== 0) {
            const items = getColorLegendItems(colorLegendItems);
            return items;
        }
        return [];
    }
}
/**
 * 默认配置项
 */
LinesLayer.DefaultOptions = DEFAULT_OPTIONS;
/**
 * 图层配置项 Keys
 */
LinesLayer.LayerOptionsKeys = PlotLayer.LayerConfigkeys.concat(LAYER_OPTIONS_KEYS);
//# sourceMappingURL=index.js.map