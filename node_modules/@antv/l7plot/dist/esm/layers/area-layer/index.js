import { uniqueId, clone, isEqual, isUndefined } from '@antv/util';
import { PolygonLayer, LineLayer } from '@antv/l7';
import { PlotLayer } from '../../core/layer/plot-layer';
import { getDefaultState, mappingLayer } from './adaptor';
import { getColorLegendItems } from '../dot-layer/helper';
const DEFAULT_OPTIONS = {
    visible: true,
    state: {
        active: false,
        select: false,
    },
    enabledMultiSelect: false,
};
const LAYER_OPTIONS_KEYS = ['color', 'style', 'state', 'enabledMultiSelect'];
export class AreaLayer extends PlotLayer {
    constructor(options) {
        super(options);
        /**
         * 选中数据
         */
        this.selectData = [];
        /**
         * 图层类型
         */
        this.type = PlotLayer.LayerType.AreaLayer;
        /**
         * 图层是否具有交互属性
         */
        this.interaction = true;
        this.onHighlighHandle = (event) => {
            const { feature, featureId } = event;
            this.setHighlightLayerSource(feature, featureId);
        };
        this.onUnhighlighHandle = () => {
            this.setHighlightLayerSource();
        };
        this.onSelectHandle = (event) => {
            const enabledMultiSelect = this.options.enabledMultiSelect;
            const { feature, featureId } = event;
            let selectData = clone(this.selectData);
            const index = selectData.findIndex((item) => item.featureId === featureId);
            if (index === -1) {
                if (enabledMultiSelect) {
                    selectData.push({ feature, featureId });
                }
                else {
                    selectData = [{ feature, featureId }];
                }
                this.emit('select', feature, clone(selectData));
            }
            else {
                const unselectFeature = selectData[index];
                if (enabledMultiSelect) {
                    selectData.splice(index, 1);
                }
                else {
                    selectData = [];
                }
                this.emit('unselect', unselectFeature, clone(selectData));
            }
            this.setSelectLayerSource(selectData);
        };
        const { name, source, visible, minZoom, maxZoom, zIndex = 0 } = this.options;
        const config = this.pickLayerConfig(this.options);
        const defaultState = getDefaultState(this.options.state);
        this.name = name ? name : uniqueId(this.type);
        this.layer = new PolygonLayer(Object.assign(Object.assign({}, config), { name: this.name }));
        this.strokeLayer = new LineLayer({ name: 'strokeLayer', visible, zIndex, minZoom, maxZoom });
        this.highlightLayer = new LineLayer({
            name: 'highlightLayer',
            visible: visible && Boolean(defaultState.active.stroke),
            zIndex: zIndex + 0.1,
            minZoom,
            maxZoom,
        });
        this.selectFillLayer = new PolygonLayer({
            name: 'selectFillLayer',
            visible: visible && Boolean(defaultState.select.fill),
            zIndex: zIndex + 0.1,
            minZoom,
            maxZoom,
        });
        this.selectStrokeLayer = new LineLayer({
            name: 'selectStrokeLayer',
            visible: visible && Boolean(defaultState.select.stroke),
            zIndex: zIndex + 0.1,
            minZoom,
            maxZoom,
        });
        this.mappingLayer(this.options);
        this.setSource(source);
        this.initEvent();
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return DEFAULT_OPTIONS;
    }
    mappingLayer(options) {
        mappingLayer(this.layer, this.strokeLayer, this.highlightLayer, this.selectFillLayer, this.selectStrokeLayer, options);
    }
    setSource(source) {
        super.setSource(source);
        this.setStrokeLayerSource();
        this.setHighlightLayerSource();
        this.selectFillLayer.source({ type: 'FeatureCollection', features: [] }, { parser: { type: 'geojson' } });
        this.selectStrokeLayer.source({ type: 'FeatureCollection', features: [] }, { parser: { type: 'geojson' } });
    }
    setStrokeLayerSource() {
        const layerSource = this.layer.getSource();
        if (layerSource) {
            this.strokeLayer.setSource(layerSource);
        }
        else {
            const { data, options } = this.layer.sourceOption;
            this.strokeLayer.source(data, options);
        }
    }
    setHighlightLayerSource(feature, featureId = -999) {
        if (this.highlightLayerData === featureId) {
            return;
        }
        const features = feature ? [feature] : [];
        if (this.highlightLayer.getSource()) {
            this.highlightLayer.setData({ type: 'FeatureCollection', features }, { parser: { type: 'geojson' } });
        }
        else {
            this.highlightLayer.source({ type: 'FeatureCollection', features: [] }, { parser: { type: 'geojson' } });
        }
        this.highlightLayerData = featureId;
    }
    setSelectLayerSource(selectData = []) {
        if (this.selectData.length === selectData.length &&
            isEqual(this.selectData.map(({ featureId }) => featureId), selectData.map(({ featureId }) => featureId))) {
            return;
        }
        const features = selectData.map(({ feature }) => feature);
        this.selectFillLayer.setData({ type: 'FeatureCollection', features }, { parser: { type: 'geojson' } });
        this.selectStrokeLayer.setData({ type: 'FeatureCollection', features }, { parser: { type: 'geojson' } });
        this.selectData = selectData;
    }
    initEvent() {
        this.layer.off('mousemove', this.onHighlighHandle);
        this.layer.off('unmousemove', this.onHighlighHandle);
        this.layer.off('click', this.onSelectHandle);
        this.selectData = [];
        this.highlightLayerData = null;
        if (!this.options.state)
            return;
        // active
        if (this.options.state.active) {
            this.layer.on('mousemove', this.onHighlighHandle);
            this.layer.on('unmousemove', this.onUnhighlighHandle);
        }
        // select
        if (this.options.state.select) {
            this.layer.on('click', this.onSelectHandle);
        }
    }
    addTo(scene) {
        scene.addLayer(this.layer);
        scene.addLayer(this.strokeLayer);
        scene.addLayer(this.highlightLayer);
        scene.addLayer(this.selectFillLayer);
        scene.addLayer(this.selectStrokeLayer);
    }
    remove(scene) {
        scene.removeLayer(this.layer);
        scene.removeLayer(this.strokeLayer);
        scene.removeLayer(this.highlightLayer);
        scene.removeLayer(this.selectFillLayer);
        scene.removeLayer(this.selectStrokeLayer);
    }
    update(options) {
        super.update(options);
        this.mappingLayer(this.options);
        if (this.options.visible) {
            if (!isUndefined(options.state) && !isEqual(this.lastOptions.state, this.options.state)) {
                this.updateHighlightLayer();
            }
            const defaultState = getDefaultState(this.options.state);
            if (defaultState.active.stroke) {
                this.setHighlightLayerSource();
            }
            if (defaultState.select.fill || defaultState.select.stroke) {
                this.setSelectLayerSource();
            }
        }
        this.initEvent();
    }
    updateHighlightLayer() {
        const defaultState = getDefaultState(this.options.state);
        const lasetDefaultState = getDefaultState(this.lastOptions.state);
        if (lasetDefaultState.active.stroke !== defaultState.active.stroke) {
            defaultState.active.stroke ? this.highlightLayer.show() : this.highlightLayer.hide();
        }
        if (lasetDefaultState.select.fill !== defaultState.select.fill) {
            defaultState.select.fill ? this.selectFillLayer.show() : this.selectFillLayer.hide();
        }
        if (lasetDefaultState.select.stroke !== defaultState.select.stroke) {
            defaultState.select.stroke ? this.selectStrokeLayer.show() : this.selectStrokeLayer.hide();
        }
    }
    setIndex(zIndex) {
        this.layer.setIndex(zIndex);
        this.strokeLayer.setIndex(zIndex);
        this.highlightLayer.setIndex(zIndex + 0.1);
        this.selectFillLayer.setIndex(zIndex + 0.1);
        this.selectStrokeLayer.setIndex(zIndex + 0.1);
    }
    setMinZoom(minZoom) {
        this.layer.setMinZoom(minZoom);
        this.strokeLayer.setMinZoom(minZoom);
        this.highlightLayer.setMinZoom(minZoom);
        this.selectFillLayer.setMinZoom(minZoom);
        this.selectStrokeLayer.setMinZoom(minZoom);
    }
    setMaxZoom(maxZoom) {
        this.layer.setMaxZoom(maxZoom);
        this.strokeLayer.setMaxZoom(maxZoom);
        this.highlightLayer.setMaxZoom(maxZoom);
        this.selectFillLayer.setMaxZoom(maxZoom);
        this.selectStrokeLayer.setMaxZoom(maxZoom);
    }
    show() {
        if (!this.layer.inited)
            return;
        this.layer.show();
        this.strokeLayer.show();
        this.selectFillLayer.show();
        this.selectStrokeLayer.show();
    }
    hide() {
        if (!this.layer.inited)
            return;
        this.layer.hide();
        this.strokeLayer.hide();
        this.selectFillLayer.hide();
        this.selectStrokeLayer.hide();
    }
    getColorLegendItems() {
        const colorLegendItems = this.layer.getLegendItems('color');
        if (Array.isArray(colorLegendItems) && colorLegendItems.length !== 0) {
            const items = getColorLegendItems(colorLegendItems);
            return items;
        }
        return [];
    }
    setActive(id) {
        // TODO: L7 method pickFeature(id|{x,y})
    }
    setSelect(id) {
        // TODO: L7 method pickFeature(id|{x,y})
    }
}
/**
 * 默认配置项
 */
AreaLayer.DefaultOptions = DEFAULT_OPTIONS;
/**
 * 图层配置项 Keys
 */
AreaLayer.LayerOptionsKeys = PlotLayer.LayerConfigkeys.concat(LAYER_OPTIONS_KEYS);
//# sourceMappingURL=index.js.map