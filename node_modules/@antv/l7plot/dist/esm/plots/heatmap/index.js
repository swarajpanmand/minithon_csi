import { pick } from '@antv/util';
import { Plot } from '../../core/plot';
import { DEFAULT_OPTIONS } from './constants';
import { HeatmapLayer } from '../../layers/heatmap-layer';
import { LayerGroup } from '../../core/layer/layer-group';
export class Heatmap extends Plot {
    constructor() {
        super(...arguments);
        /**
         * 地图类型
         */
        this.type = Plot.PlotType.Heatmap;
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return Heatmap.DefaultOptions;
    }
    /**
     * 创建图层
     */
    createLayers(source) {
        this.heatmapLayer = new HeatmapLayer(Object.assign({ source }, pick(this.options, HeatmapLayer.LayerOptionsKeys)));
        const layerGroup = new LayerGroup([this.heatmapLayer]);
        if (this.options.label) {
            this.labelLayer = this.createLabelLayer(this.source, this.options.label, this.options);
            layerGroup.addLayer(this.labelLayer);
        }
        return layerGroup;
    }
    /**
     * 更新图层
     */
    updateLayers(options) {
        const heatMapLayerConfig = pick(options, HeatmapLayer.LayerOptionsKeys);
        this.heatmapLayer.update(heatMapLayerConfig);
        this.updateLabelLayer(this.source, options.label, this.options, this.labelLayer);
    }
    /**
     * 实现 legend 配置项
     */
    getLegendOptions() {
        var _a;
        const sizeLegendItems = this.heatmapLayer.layer.getLegendItems('size');
        if (Array.isArray(sizeLegendItems) && sizeLegendItems.length !== 0) {
            const min = sizeLegendItems[0].value;
            const max = sizeLegendItems[sizeLegendItems.length - 1].value;
            const colors = (_a = this.heatmapLayer.options.style) === null || _a === void 0 ? void 0 : _a.colorsRamp.map(({ color }) => color);
            return { type: 'continue', min, max, colors };
        }
        return {};
    }
}
/**
 * 默认配置项
 */
Heatmap.DefaultOptions = DEFAULT_OPTIONS;
//# sourceMappingURL=index.js.map