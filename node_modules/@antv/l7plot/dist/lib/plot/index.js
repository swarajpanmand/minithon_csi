"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.L7Plot = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@antv/util");
const map_1 = require("../core/map");
const utils_1 = require("../utils");
const layer_group_1 = require("../core/layer/layer-group");
const types_1 = require("./types");
const DEFAULT_OPTIONS = {};
class L7Plot extends map_1.Map {
    constructor(container, options) {
        super(options);
        /**
         * 图表实例
         */
        this.plots = [];
        this.container = this.createContainer(container);
        this.theme = this.createTheme();
        this.scene = this.createScene();
        this.registerResources();
        this.render();
        this.inited = true;
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return (0, utils_1.deepAssign)({}, map_1.Map.DefaultOptions, L7Plot.DefaultOptions);
    }
    /**
     * 创建所有图层
     */
    createLayers() {
        const layerGroup = new layer_group_1.LayerGroup([]);
        const layers = this.options.layers || [];
        for (let index = 0; index < layers.length; index++) {
            const layer = this.createLayer(layers[index]);
            layerGroup.addLayer(layer);
        }
        return layerGroup;
    }
    /**
     * 创建图层实例
     */
    createLayer(layerConfig) {
        const { type } = layerConfig, options = tslib_1.__rest(layerConfig, ["type"]);
        const LayerClass = types_1.LAYERS_MAP[type];
        if ((0, util_1.isUndefined)(LayerClass)) {
            throw new Error(`Don't exist ${type} layer`);
        }
        const layer = new LayerClass(options);
        return layer;
    }
    /**
     * 添加图层
     */
    addLayer(layer) {
        const isLayerClass = (layer) => {
            return typeof layer['render'] === 'function';
        };
        if (isLayerClass(layer)) {
            super.addLayer(layer);
        }
        else {
            const plotLayer = this.createLayer(layer);
            super.addLayer(plotLayer);
        }
    }
    /**
     * 移除图层
     */
    removeLayerByName(name) {
        const layer = this.layerGroup.getLayerByName(name);
        if (layer) {
            return this.layerGroup.removeLayer(layer);
        }
        return false;
    }
    /**
     * 更新图层
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updateLayers(layers) {
        //
    }
    /**
     * 更新 Plot
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updatePlots(plots) {
        //
    }
    /**
     * 渲染
     */
    render() {
        const layerGroup = this.createLayers();
        if (this.inited) {
            this.layerGroup.removeAllLayer();
            layerGroup.addTo(this.scene);
            this.layerGroup = layerGroup;
            this.updateControls();
        }
        else {
            this.layerGroup = layerGroup;
            if (this.scene['sceneService'].loaded) {
                this.onSceneLoaded();
            }
            else {
                this.scene.once('loaded', () => {
                    this.onSceneLoaded();
                });
            }
        }
    }
    /**
     * scene 加载成功回调
     */
    onSceneLoaded() {
        this.sceneLoaded = true;
        if (this.layerGroup.isEmpty()) {
            this.onLayersLoaded();
        }
        else {
            this.layerGroup.once('inited-all', () => {
                this.onLayersLoaded();
            });
        }
        this.layerGroup.addTo(this.scene);
    }
    /**
     * 图层加载成功回调
     */
    onLayersLoaded() {
        this.layersLoaded = true;
        this.renderPlots();
        this.initControls();
        this.loaded = true;
        this.emit('loaded');
    }
    /**
     * 渲染 plots
     */
    renderPlots() {
        const plots = this.options.plots || [];
        for (let index = 0; index < plots.length; index++) {
            const plot = plots[index];
            const plotInstance = this.createPlot(plot);
            this.plots.push(plotInstance);
        }
    }
    /**
     * 创建 plot
     */
    createPlot(plot) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { type, legend, layerMenu } = plot, options = tslib_1.__rest(plot, ["type", "legend", "layerMenu"]);
        const PlotClass = types_1.PLOTS_MAP[type];
        if ((0, util_1.isUndefined)(PlotClass)) {
            throw new Error(`Don't exist ${type} plot`);
        }
        const plotInstance = new PlotClass(options);
        plotInstance.attachToScene(this.scene, this.theme);
        return plotInstance;
    }
    /**
     * 添加图表
     */
    addPlot(plotConfig) {
        // TODO: duplicate plot
        const plotInstance = this.createPlot(plotConfig);
        this.plots.push(plotInstance);
    }
    /**
     * 获取所有图表
     */
    getPlots() {
        return this.plots;
    }
    /**
     * 根据图表名称获取图表
     */
    getPlotByName(name) {
        return this.plots.find((plot) => { var _a; return ((_a = plot.options) === null || _a === void 0 ? void 0 : _a.name) === name; });
    }
    /**
     * 根据图表名称移除图表
     */
    removePlotByName(name) {
        const layerIndex = this.plots.findIndex((plot) => { var _a; return ((_a = plot.options) === null || _a === void 0 ? void 0 : _a.name) === name; });
        if (layerIndex === -1)
            return false;
        const [plot] = this.plots.splice(layerIndex, 1);
        plot.unattachFromScene();
        return true;
    }
    /**
     * 移除所有的图表
     */
    removeAllPlot() {
        this.plots.forEach((plot) => {
            plot.unattachFromScene();
        });
        this.plots = [];
    }
}
exports.L7Plot = L7Plot;
/**
 * 默认的 options 配置项
 */
L7Plot.DefaultOptions = DEFAULT_OPTIONS;
//# sourceMappingURL=index.js.map