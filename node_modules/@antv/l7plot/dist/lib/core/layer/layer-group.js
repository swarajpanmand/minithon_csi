"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayerGroup = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@antv/util");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
class LayerGroup extends event_emitter_1.default {
    constructor(layers = [], option = {}) {
        super();
        this.name = option.name ? option.name : (0, util_1.uniqueId)('layerGroup');
        this.layers = layers;
    }
    /**
     * 图层组添加到地图上
     */
    addTo(scene) {
        this.scene = scene;
        let layerIndex = 0;
        const layerLength = this.layers.length;
        this.layers.forEach((layer) => {
            layer.once('inited', (e) => {
                layerIndex++;
                this.emit('inited', e);
                if (layerIndex === layerLength) {
                    this.emit('inited-all');
                }
            });
            layer.addTo(scene);
        });
    }
    /**
     * 图层组是否有该图层
     */
    hasLayer(layer) {
        return this.layers.some((itemLayer) => itemLayer === layer);
    }
    /**
     * 增加图层
     */
    addLayer(layer) {
        // TODO: duplicate layer
        this.layers.push(layer);
        if (this.scene) {
            layer.once('inited', (e) => this.emit('inited', e));
            layer.addTo(this.scene);
        }
    }
    /**
     * 移除 layer 图层
     */
    removeLayer(layer) {
        const layerIndex = this.layers.findIndex((itemLayer) => itemLayer === layer);
        if (layerIndex === -1)
            return false;
        this.layers.splice(layerIndex, 1);
        if (this.scene) {
            layer.remove(this.scene);
        }
        return true;
    }
    /**
     * 获取所有的地图图层
     */
    getLayers() {
        return this.layers;
    }
    /**
     * 获取所有的带交互图层
     */
    getInteractionLayers() {
        return this.layers.filter(({ interaction }) => interaction);
    }
    /**
     * 根据图层 ID 获取图层对象
     */
    getLayer(id) {
        return this.layers.find(({ layer }) => layer.id === id);
    }
    /**
     * 根据图层 name 获取图层对象
     */
    getLayerByName(name) {
        return this.layers.find((itemLayer) => itemLayer.name === name);
    }
    /**
     * 移除所有的图层对象
     */
    removeAllLayer() {
        this.layers.forEach((layer) => {
            if (this.scene) {
                layer.remove(this.scene);
            }
        });
        this.layers = [];
    }
    /**
     * 是否图层组为空
     */
    isEmpty() {
        return this.layers.length === 0;
    }
}
exports.LayerGroup = LayerGroup;
//# sourceMappingURL=layer-group.js.map