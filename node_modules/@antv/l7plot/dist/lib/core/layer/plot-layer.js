"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlotLayer = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@antv/util");
const l7_1 = require("@antv/l7");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
const layer_1 = require("../../types/layer");
const source_1 = require("../../adaptor/source");
const constants_1 = require("../map/constants");
const utils_1 = require("../../utils");
const LayerConfigkeys = ['name', 'zIndex', 'visible', 'minZoom', 'maxZoom', 'pickingBuffer', 'autoFit', 'blend'];
class PlotLayer extends event_emitter_1.default {
    constructor(options) {
        super();
        this.options = (0, utils_1.deepAssign)({}, this.getDefaultOptions(), options);
        this.lastOptions = this.options;
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return {};
    }
    pickLayerConfig(params) {
        const config = (0, util_1.pick)(params, LayerConfigkeys);
        return config;
    }
    addTo(scene) {
        scene.addLayer(this.layer);
    }
    remove(scene) {
        scene.removeLayer(this.layer);
    }
    /**
     * 更新
     */
    update(options) {
        this.updateOption(options);
        this.updateConfig(options);
    }
    /**
     * 更新: 更新配置
     */
    updateOption(options) {
        this.lastOptions = this.options;
        this.options = (0, utils_1.deepAssign)({}, this.options, options);
    }
    // 更新: 更新图层属性配置
    updateConfig(options) {
        if (!(0, util_1.isUndefined)(options.zIndex) && !(0, util_1.isEqual)(this.lastOptions.zIndex, this.options.zIndex)) {
            this.setIndex(options.zIndex);
        }
        if (!(0, util_1.isUndefined)(options.blend) && !(0, util_1.isEqual)(this.lastOptions.blend, this.options.blend)) {
            this.setBlend(options.blend);
        }
        if (!(0, util_1.isUndefined)(options.minZoom) && !(0, util_1.isEqual)(this.lastOptions.minZoom, this.options.minZoom)) {
            this.setMinZoom(options.minZoom);
        }
        if (!(0, util_1.isUndefined)(options.maxZoom) && !(0, util_1.isEqual)(this.lastOptions.maxZoom, this.options.maxZoom)) {
            this.setMinZoom(options.maxZoom);
        }
        if (!(0, util_1.isUndefined)(options.visible) && !(0, util_1.isEqual)(this.lastOptions.visible, this.options.visible)) {
            options.visible ? this.show() : this.hide();
        }
    }
    render() {
        this.layer.renderLayers();
    }
    setSource(source) {
        if (source instanceof l7_1.Source) {
            this.layer.setSource(source);
        }
        else {
            const { data, aggregation } = source, option = tslib_1.__rest(source, ["data", "aggregation"]);
            aggregation && source_1.MappingSource.aggregation(option, aggregation);
            const layerSource = this.layer.getSource();
            if (layerSource) {
                this.layer.setData(data, option);
            }
            else {
                this.layer.source(data, option);
            }
        }
    }
    changeData(source) {
        this.setSource(source);
    }
    setIndex(zIndex) {
        this.layer.setIndex(zIndex);
    }
    setBlend(blend) {
        this.layer.setBlend(blend);
    }
    setMinZoom(minZoom) {
        this.layer.setMinZoom(minZoom);
    }
    setMaxZoom(maxZoom) {
        this.layer.setMaxZoom(maxZoom);
    }
    show() {
        this.layer.inited && this.layer.show();
    }
    hide() {
        this.layer.inited && this.layer.hide();
    }
    toggleVisible() {
        this.isVisible() ? this.hide() : this.show();
    }
    isVisible() {
        return this.layer.inited ? this.layer.isVisible() : this.options.visible;
    }
    fitBounds(fitBoundsOptions) {
        this.layer.fitBounds(fitBoundsOptions);
    }
    /**
     * 事件代理: 绑定事件
     */
    on(name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.on(name, callback);
        }
        else {
            super.on(name, callback);
        }
        return this;
    }
    /**
     * 事件代理: 绑定一次事件
     */
    once(name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.once(name, callback);
        }
        else {
            super.once(name, callback);
        }
        return this;
    }
    /**
     * 事件代理: 解绑事件
     */
    off(name, callback) {
        if (constants_1.LayerEventList.indexOf(name) !== -1) {
            this.layer.off(name, callback);
        }
        else {
            super.off(name, callback);
        }
        return this;
    }
}
exports.PlotLayer = PlotLayer;
/**
 * 地图图表类型
 */
PlotLayer.LayerType = layer_1.LayerType;
/**
 * 图层属性配置项 Keys
 */
PlotLayer.LayerConfigkeys = LayerConfigkeys;
//# sourceMappingURL=plot-layer.js.map