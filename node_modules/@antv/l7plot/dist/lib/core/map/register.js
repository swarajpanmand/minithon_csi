"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ICON_FONT_CACHE = exports.FONT_FACE_CACHE = exports.IMAGES_CACHE = void 0;
exports.registerImage = registerImage;
exports.registerImages = registerImages;
exports.getImage = getImage;
exports.hasImage = hasImage;
exports.unregisterImage = unregisterImage;
exports.registerFontFace = registerFontFace;
exports.unregisterFontFace = unregisterFontFace;
exports.registerIconFont = registerIconFont;
exports.registerIconFonts = registerIconFonts;
exports.unregisterIconFont = unregisterIconFont;
/**
 * 自定义添加图片资源
 */
exports.IMAGES_CACHE = new Map();
function registerImage(id, image) {
    exports.IMAGES_CACHE.set(id, image);
}
function registerImages(images) {
    images.forEach((iconFont) => {
        exports.IMAGES_CACHE.set(iconFont.id, iconFont.image);
    });
}
function getImage(id) {
    return exports.IMAGES_CACHE.get(id);
}
function hasImage(id) {
    return exports.IMAGES_CACHE.has(id);
}
function unregisterImage(id) {
    return exports.IMAGES_CACHE.delete(id);
}
/**
 * 自定义添加第三方字体
 */
exports.FONT_FACE_CACHE = new Map();
function registerFontFace(fontFamily, fontPath) {
    exports.FONT_FACE_CACHE.set(fontFamily, fontPath);
}
function unregisterFontFace(fontFamily) {
    return exports.FONT_FACE_CACHE.delete(fontFamily);
}
/**
 * 自定义添加 iconfont
 */
exports.ICON_FONT_CACHE = new Map();
function registerIconFont(name, fontUnicode) {
    exports.ICON_FONT_CACHE.set(name, fontUnicode);
}
function registerIconFonts(iconFonts) {
    iconFonts.forEach((iconFont) => {
        exports.ICON_FONT_CACHE.set(iconFont.name, iconFont.fontUnicode);
    });
}
function unregisterIconFont(name) {
    return exports.ICON_FONT_CACHE.delete(name);
}
//# sourceMappingURL=register.js.map