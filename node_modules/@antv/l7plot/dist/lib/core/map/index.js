"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Map = void 0;
const tslib_1 = require("tslib");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
const l7_1 = require("@antv/l7");
const util_1 = require("@antv/util");
const legend_1 = require("../../component/legend");
const tooltip_1 = require("../../component/tooltip");
const theme_1 = require("../../theme");
const util_2 = require("../../theme/util");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
const layer_group_1 = require("../layer/layer-group");
const constants_1 = require("./constants");
const register_1 = require("./register");
const DEFAULT_OPTIONS = {
    map: { type: types_1.BaseMapType.Amap },
    logo: true,
};
class Map extends event_emitter_1.default {
    constructor(options) {
        super();
        /**
         * 是否初始化成功
         */
        this.inited = false;
        /**
         * 是否场景加载完成
         */
        this.sceneLoaded = false;
        /**
         * 是否所有图层加载完成
         */
        this.layersLoaded = false;
        /**
         * 是否场景与所有图层加载完成
         */
        this.loaded = false;
        /**
         * 图层组
         */
        this.layerGroup = new layer_group_1.LayerGroup();
        this.options = (0, utils_1.deepAssign)({}, this.getDefaultOptions(), options);
        this.lastOptions = this.options;
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return Map.DefaultOptions;
    }
    /**
     * 创建 DOM 容器
     */
    createContainer(container) {
        const { width, height } = this.options;
        const dom = typeof container === 'string' ? document.getElementById(container) : container;
        dom.style.position || (dom.style.position = 'relative');
        if (width) {
            dom.style.width || (dom.style.width = `${width}px`);
        }
        if (height) {
            dom.style.height || (dom.style.height = `${height}px`);
        }
        return dom;
    }
    /**
     * 注册主题
     */
    createTheme() {
        const theme = (0, util_1.isObject)(this.options.theme)
            ? (0, utils_1.deepAssign)({}, (0, theme_1.getTheme)('default'), (0, util_2.createTheme)(this.options.theme))
            : (0, theme_1.getTheme)(this.options.theme);
        return theme;
    }
    /**
     * 创建 map 容器
     */
    createMap() {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const mapConfig = this.options.map ? this.options.map : DEFAULT_OPTIONS.map;
        const { type } = mapConfig, config = tslib_1.__rest(mapConfig, ["type"]);
        const options = Object.assign({ style: this.theme['mapStyle'] }, config);
        return type === types_1.BaseMapType.Amap
            ? new l7_1.GaodeMap(options)
            : type === types_1.BaseMapType.AmapV1
                ? new l7_1.GaodeMapV1(options)
                : type === types_1.BaseMapType.AmapV2
                    ? new l7_1.GaodeMapV2(options)
                    : type === types_1.BaseMapType.Mapbox
                        ? new l7_1.Mapbox(options)
                        : new l7_1.Map(options);
    }
    /**
     * 创建 scene 实例
     */
    createScene() {
        const { logo, antialias, preserveDrawingBuffer } = this.options;
        const logoConfig = (0, util_1.isBoolean)(logo)
            ? { logoVisible: logo }
            : { logoVisible: logo === null || logo === void 0 ? void 0 : logo.visible, logoPosition: logo === null || logo === void 0 ? void 0 : logo.position };
        const sceneConfig = Object.assign({
            // animate,
            // fitBoundsOptions,
            // pickBufferScale,
            // enableMultiPassRenderer,
            // passes,
            antialias,
            preserveDrawingBuffer,
        }, logoConfig);
        const map = this.createMap();
        const scene = new l7_1.Scene(Object.assign({ id: this.container, map: map }, sceneConfig));
        return scene;
    }
    /**
     * 注册静态资源
     */
    registerResources() {
        if (register_1.IMAGES_CACHE.size) {
            register_1.IMAGES_CACHE.forEach((img, id) => {
                !this.scene.hasImage(id) && this.scene.addImage(id, img);
            });
        }
        if (register_1.FONT_FACE_CACHE.size) {
            register_1.FONT_FACE_CACHE.forEach((fontPath, fontFamily) => {
                this.scene.addFontFace(fontFamily, fontPath);
            });
        }
        if (register_1.ICON_FONT_CACHE.size) {
            register_1.ICON_FONT_CACHE.forEach((name, fontUnicode) => {
                this.scene.addIconFont(fontUnicode, name);
            });
        }
    }
    /**
     * 更新: 更新配置且重新渲染
     */
    update(options) {
        this.updateOption(options);
        if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {
            this.updateMap(options.map);
        }
        this.render();
        this.emit('update');
    }
    /**
     * 更新: 更新配置
     */
    updateOption(options) {
        this.lastOptions = this.options;
        this.options = (0, utils_1.deepAssign)({}, this.options, options);
    }
    /**
     * 更新: 地图底图配置
     */
    updateMap(updateMapConfig) {
        var _a;
        if (!this.scene)
            return;
        const { style, center, zoom, rotation, pitch } = updateMapConfig;
        if (!(0, util_1.isUndefined)(pitch)) {
            this.scene.setPitch(pitch);
        }
        if (!(0, util_1.isUndefined)(rotation)) {
            this.scene.setRotation(rotation);
        }
        if (style && style !== ((_a = this.lastOptions.map) === null || _a === void 0 ? void 0 : _a.style)) {
            this.scene.setMapStyle(style);
        }
        if (zoom && center) {
            this.scene.setZoomAndCenter(zoom, center);
        }
    }
    /**
     * 修改容器大小
     */
    changeSize(width, height) {
        if (this.options.width === width && this.options.height === height)
            return;
        this.container.style.width = `${width}px`;
        this.container.style.height = `${height}px`;
        this.options = Object.assign(this.options, { width, height });
    }
    /**
     * 事件代理: 绑定事件
     */
    on(name, callback, once) {
        this.proxyEventHander('on', name, callback, once);
        return this;
    }
    /**
     * 事件代理: 绑定一次事件
     */
    once(name, callback) {
        this.proxyEventHander('once', name, callback);
        return this;
    }
    /**
     * 事件代理: 解绑事件
     */
    off(name, callback) {
        this.proxyEventHander('off', name, callback);
        return this;
    }
    /**
     * 事件代理: 事件处理
     */
    proxyEventHander(type, name, callback, once) {
        const sceneEvent = constants_1.SceneEventList.find((event) => event.adaptation === name);
        if (sceneEvent) {
            this.scene[type](sceneEvent.original, callback);
        }
        else if (constants_1.MapEventList.indexOf(name) !== -1) {
            this.scene[type](name, callback);
        }
        else if (name.includes('Layer:')) {
            const [module, eventName] = name.split(':');
            const hasEventEmitter = this[module] && this[module][type];
            if (hasEventEmitter && constants_1.LayerEventList.indexOf(eventName) !== -1) {
                this[module][type](eventName, callback);
            }
            else {
                throw new Error(`No event name "${name}"`);
            }
        }
        else {
            super[type](name, callback, once);
        }
    }
    /**
     * 获取 scene 实例
     */
    getScene() {
        return this.scene;
    }
    /**
     * 获取 map 实例
     */
    getMap() {
        var _a, _b, _c, _d;
        if (((_a = this.options.map) === null || _a === void 0 ? void 0 : _a.type) === types_1.BaseMapType.Amap) {
            return this.scene.map;
        }
        else if (((_b = this.options.map) === null || _b === void 0 ? void 0 : _b.type) === types_1.BaseMapType.AmapV2) {
            return this.scene.map;
        }
        else if (((_c = this.options.map) === null || _c === void 0 ? void 0 : _c.type) === types_1.BaseMapType.Mapbox) {
            return this.scene.map;
        }
        else if (((_d = this.options.map) === null || _d === void 0 ? void 0 : _d.type) === types_1.BaseMapType.Map) {
            return this.scene.map;
        }
        else {
            return this.scene.map;
        }
    }
    /**
     * 添加图层
     */
    addLayer(layer) {
        this.layerGroup.addLayer(layer);
    }
    /**
     * 获取所有图层
     *  @deprecate
     */
    getLayes() {
        console.warn('Replace to use getLayers()');
        return this.getLayers();
    }
    /**
     * 获取所有图层
     */
    getLayers() {
        return this.layerGroup.getLayers();
    }
    /**
     * 根据图层名称获取图层
     */
    getLayerByName(name) {
        return this.layerGroup.getLayerByName(name);
    }
    /**
     * 移除图层
     */
    removeLayer(layer) {
        return this.layerGroup.removeLayer(layer);
    }
    /**
     * 移除内置所有的图层
     */
    removeAllLayer() {
        this.layerGroup.removeAllLayer();
    }
    /**
     * 地图放大一级
     */
    zoomIn() {
        this.scene.zoomIn();
    }
    /**
     * 地图缩小一级
     */
    zoomOut() {
        this.scene.zoomOut();
    }
    /**
     * 设置地图倾角
     */
    setPitch(pitch) {
        this.scene.setPitch(pitch);
    }
    /**
     * 设置地图缩放范围
     */
    fitBounds(bound) {
        this.scene.fitBounds(bound);
    }
    /**
     * 设置地图状态
     * 可用来关闭地图的一些交互操作
     */
    setMapStatus(status) {
        this.scene.setMapStatus(status);
    }
    /**
     * 设置场景的背景色
     */
    setBgColor(color) {
        this.scene.setBgColor(color);
    }
    /**
     * 初始化组件
     */
    initComponents() {
        this.initControls();
        this.initTooltip();
    }
    /**
     * 更新化组件
     */
    updateComponents() {
        this.updateControls();
        this.initTooltip();
    }
    /**
     * 初始化控件
     */
    initControls() {
        const { zoom, scale, layerMenu, legend } = this.options;
        scale && this.addScaleControl(scale);
        zoom && this.addZoomControl(zoom);
        layerMenu && this.addLayerMenuControl(layerMenu);
        if (legend) {
            this.addLegendControl(legend);
            this.emit('add-legend');
        }
    }
    /**
     * 更新控件
     */
    updateControls() {
        const { zoom, scale, layerMenu, legend } = this.options;
        if (!(0, util_1.isEqual)(this.lastOptions.zoom, zoom)) {
            zoom ? this.updateZoomControl(zoom) : this.removeZoomControl();
        }
        if (!(0, util_1.isEqual)(this.lastOptions.scale, scale)) {
            scale ? this.updateScaleControl(scale) : this.removeScaleControl();
        }
        if (!(0, util_1.isEqual)(this.lastOptions.layerMenu, layerMenu)) {
            layerMenu ? this.updateLayerMenuControl(layerMenu) : this.removeLayerMenuControl();
        }
        if (!(0, util_1.isEqual)(this.lastOptions.legend, legend)) {
            legend ? this.updateLegendControl(legend) : this.removeLegendControl();
        }
    }
    /**
     * 添加 zoom 控件
     */
    addZoomControl(options) {
        if (this.zoomControl) {
            return;
        }
        this.zoomControl = new l7_1.Zoom(options);
        this.scene.addControl(this.zoomControl);
    }
    /**
     * 更新 zoom 控件
     */
    updateZoomControl(options) {
        if (!this.zoomControl) {
            this.addZoomControl(options);
            return;
        }
        this.removeZoomControl();
        this.addZoomControl(options);
    }
    /**
     * 移除 zoom 控件
     */
    removeZoomControl() {
        if (this.zoomControl) {
            this.zoomControl.remove();
            this.zoomControl = undefined;
        }
    }
    /**
     * 添加 scale 控件
     */
    addScaleControl(options) {
        if (this.scaleControl) {
            return;
        }
        this.scaleControl = new l7_1.Scale(options);
        this.scene.addControl(this.scaleControl);
    }
    /**
     * 更新 scale 控件
     */
    updateScaleControl(options) {
        if (!this.scaleControl) {
            this.addScaleControl(options);
            return;
        }
        this.removeScaleControl();
        this.addScaleControl(options);
    }
    /**
     * 移除 scale 控件
     */
    removeScaleControl() {
        if (this.scaleControl) {
            this.scaleControl.remove();
            this.scaleControl = undefined;
        }
    }
    /**
     * 添加 layerMenu 控件
     */
    addLayerMenuControl(options) {
        // if (this.layerMenuControl) {
        //   return;
        // }
        const baseLayers = {};
        const overlayers = {};
        this.layerGroup.getLayers().forEach(({ name, layer }) => {
            overlayers[name] = layer;
        });
        // this.layerMenuControl = new Layers(Object.assign({}, options, { baseLayers, overlayers }));
        // this.scene.addControl(this.layerMenuControl);
    }
    /**
     * 更新 layerMenu 控件
     */
    updateLayerMenuControl(options) {
        // if (!this.layerMenuControl) {
        //   this.addLayerMenuControl(options);
        //   return;
        // }
        this.removeLayerMenuControl();
        this.addLayerMenuControl(options);
    }
    /**
     * 移除 layerMenu 控件
     */
    removeLayerMenuControl() {
        // if (this.layerMenuControl) {
        //   this.layerMenuControl.remove();
        //   this.layerMenuControl = undefined;
        // }
    }
    /**
     * 获取 legend 配置项
     * 由各图各自实现，不同的图 legend 可能不同
     */
    getLegendOptions() {
        return {};
    }
    /**
     * 添加 legend 控件
     */
    addLegendControl(options) {
        if (this.legendControl) {
            return;
        }
        const legendTheme = this.theme['components'].legend;
        const legendOptions = (0, utils_1.deepAssign)({}, this.getLegendOptions(), options);
        const { type, position } = legendOptions, rest = tslib_1.__rest(legendOptions, ["type", "position"]);
        const items = [];
        if (type === 'category') {
            const options = (0, utils_1.deepAssign)({}, { domStyles: legendTheme.category.domStyles }, rest);
            items.push({ type, options });
        }
        else if (type === 'continue') {
            const options = (0, utils_1.deepAssign)({}, { domStyles: legendTheme.continue.domStyles }, rest);
            items.push({ type, options });
        }
        if (items.length) {
            this.legendControl = new legend_1.Legend({ position, items });
            this.scene.addControl(this.legendControl);
        }
    }
    /**
     * 更新 legend 控件
     */
    updateLegendControl(options) {
        if (!this.legendControl) {
            this.addLegendControl(options);
            return;
        }
        this.removeLegendControl();
        this.addLegendControl(options);
    }
    /**
     * 移除 legend 控件
     */
    removeLegendControl() {
        if (this.legendControl) {
            this.legendControl.remove();
            this.legendControl = undefined;
        }
    }
    /**
     * 初始化 tooltip
     */
    initTooltip() {
        if (this.tooltip) {
            this.tooltip.destroy();
        }
        const { tooltip } = this.options;
        if (tooltip) {
            const options = (0, utils_1.deepAssign)({}, { domStyles: this.theme['components'].tooltip.domStyles }, tooltip);
            const interactionLayers = this.layerGroup.getInteractionLayers();
            this.tooltip = new tooltip_1.Tooltip(this.scene, interactionLayers, options);
            this.tooltip.on('*', (event) => this.emit(event.type, event));
        }
    }
    /**
     * 导出地图图片
     */
    exportPng(type) {
        return this.scene.exportPng(type);
    }
    /**
     * 销毁
     */
    destroy() {
        var _a;
        // TODO: 清空已经绑定其他的事件
        super.off('*');
        this.removeScaleControl();
        this.removeZoomControl();
        this.removeLayerMenuControl();
        this.removeLegendControl();
        (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.destroy();
        this.scene.destroy();
    }
}
exports.Map = Map;
/**
 * 默认的 options 配置项
 */
Map.DefaultOptions = DEFAULT_OPTIONS;
//# sourceMappingURL=index.js.map