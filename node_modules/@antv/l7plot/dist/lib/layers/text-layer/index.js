"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextLayer = void 0;
const util_1 = require("@antv/util");
const l7_1 = require("@antv/l7");
const plot_layer_1 = require("../../core/layer/plot-layer");
const adaptor_1 = require("./adaptor");
const DEFAULT_OPTIONS = {
    style: {
        fontSize: 12,
    },
};
const LAYER_OPTIONS_KEYS = [];
class TextLayer extends plot_layer_1.PlotLayer {
    constructor(options) {
        super(options);
        /**
         * 图层类型
         */
        this.type = plot_layer_1.PlotLayer.LayerType.TextLayer;
        /**
         * 图层是否具有交互属性
         */
        this.interaction = false;
        const { name, source } = this.options;
        const config = this.pickLayerConfig(this.options);
        this.name = name ? name : (0, util_1.uniqueId)(this.type);
        this.layer = new l7_1.PointLayer(Object.assign(Object.assign({}, config), { name: this.name }));
        this.mappingLayer(this.layer, this.options);
        this.setSource(source);
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return DEFAULT_OPTIONS;
    }
    mappingLayer(layer, options) {
        (0, adaptor_1.mappingLayer)(layer, options);
    }
    update(options) {
        super.update(options);
        this.mappingLayer(this.layer, this.options);
    }
}
exports.TextLayer = TextLayer;
/**
 * 默认配置项
 */
TextLayer.DefaultOptions = DEFAULT_OPTIONS;
/**
 * 图层配置项 Keys
 */
TextLayer.LayerOptionsKeys = plot_layer_1.PlotLayer.LayerConfigkeys.concat(LAYER_OPTIONS_KEYS);
//# sourceMappingURL=index.js.map