"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultState = void 0;
exports.mappingLayer = mappingLayer;
const util_1 = require("@antv/util");
const layer_1 = require("../../adaptor/layer");
const defaultHighlightColor = '#2f54eb';
const defaultState = {
    active: {
        fill: false,
        stroke: defaultHighlightColor,
        lineWidth: 1.5,
        lineOpacity: 0.8,
    },
    select: {
        fill: false,
        stroke: defaultHighlightColor,
        lineWidth: 1.5,
        lineOpacity: 0.8,
    },
};
const getDefaultState = (state) => {
    if ((0, util_1.isUndefined)(state)) {
        return defaultState;
    }
    if (state.active === false) {
        defaultState.active = Object.assign(defaultState.active, { fill: false, stroke: false });
    }
    else if (typeof state.active === 'object') {
        if (state.active.fill === false) {
            defaultState.active.fill = false;
        }
        else if (typeof state.active.fill === 'string') {
            defaultState.active.fill = state.active.fill;
        }
        if (state.active.stroke === false) {
            defaultState.active.stroke = false;
        }
        else if (typeof state.active.stroke === 'string') {
            defaultState.active.stroke = state.active.stroke;
        }
        if (typeof state.active.lineWidth === 'number') {
            defaultState.active.lineWidth = state.active.lineWidth;
        }
        if (typeof state.active.lineOpacity === 'number') {
            defaultState.active.lineOpacity = state.active.lineOpacity;
        }
    }
    if (state.select === false) {
        defaultState.select = Object.assign(defaultState.select, { fill: false, stroke: false });
    }
    else if (typeof state.select === 'object') {
        if (state.select.fill === false) {
            defaultState.select.fill = false;
        }
        else if (typeof state.select.fill === 'string') {
            defaultState.select.fill = state.select.fill;
        }
        if (state.select.stroke === false) {
            defaultState.select.stroke = false;
        }
        else if (typeof state.select.stroke === 'string') {
            defaultState.select.stroke = state.select.stroke;
        }
        if (typeof state.select.lineWidth === 'number') {
            defaultState.select.lineWidth = state.select.lineWidth;
        }
        if (typeof state.select.lineOpacity === 'number') {
            defaultState.select.lineOpacity = state.select.lineOpacity;
        }
    }
    return defaultState;
};
exports.getDefaultState = getDefaultState;
function mappingLayer(layer, strokeLayer, highlightLayer, selectFillLayer, selectStrokeLayer, options) {
    const { color, style, state } = options;
    const defaultState = (0, exports.getDefaultState)(state);
    const fillState = {
        active: defaultState.active.fill === false ? false : { color: defaultState.active.fill },
        select: false,
    };
    const fillStyle = { opacity: style === null || style === void 0 ? void 0 : style.opacity };
    const strokeSize = style === null || style === void 0 ? void 0 : style.lineWidth;
    const strokeColor = style === null || style === void 0 ? void 0 : style.stroke;
    const strokeStyle = { opacity: style === null || style === void 0 ? void 0 : style.lineOpacity, dashArray: style === null || style === void 0 ? void 0 : style.lineDash, lineType: style === null || style === void 0 ? void 0 : style.lineType };
    /**
     * 映射填充面图层
     */
    // shape
    layer_1.MappingLayer.shape(layer, 'fill');
    // color
    color && layer_1.MappingLayer.color(layer, color);
    // style
    fillStyle && layer_1.MappingLayer.style(layer, fillStyle);
    // state
    fillState && layer_1.MappingLayer.state(layer, fillState);
    /**
     * 描边图层
     */
    // shape
    layer_1.MappingLayer.shape(strokeLayer, 'line');
    // size
    strokeSize && layer_1.MappingLayer.size(strokeLayer, strokeSize);
    // color
    strokeColor && layer_1.MappingLayer.color(strokeLayer, strokeColor);
    // style
    strokeStyle && layer_1.MappingLayer.style(strokeLayer, strokeStyle);
    /**
     * 高亮图层
     */
    if (defaultState.active.stroke) {
        const color = defaultState.active.stroke;
        const size = defaultState.active.lineWidth || strokeSize;
        const style = { opacity: defaultState.active.lineOpacity };
        // shape
        layer_1.MappingLayer.shape(highlightLayer, 'line');
        // size
        size && layer_1.MappingLayer.size(highlightLayer, size);
        // color
        color && layer_1.MappingLayer.color(highlightLayer, color);
        // style
        style && layer_1.MappingLayer.style(highlightLayer, style);
    }
    /**
     * 选中填充图层
     */
    if (defaultState.select.fill) {
        const color = defaultState.select.fill;
        // shape
        layer_1.MappingLayer.shape(selectFillLayer, 'fill');
        // color
        color && layer_1.MappingLayer.color(selectFillLayer, color);
        // style
        fillStyle && layer_1.MappingLayer.style(selectFillLayer, fillStyle);
        // state
        layer_1.MappingLayer.state(selectFillLayer, { select: false, active: false });
    }
    /**
     * 选中描边图层
     */
    if (defaultState.select.stroke) {
        const color = defaultState.select.stroke;
        const size = defaultState.select.lineWidth || strokeSize;
        const style = { opacity: defaultState.select.lineOpacity };
        // shape
        layer_1.MappingLayer.shape(selectStrokeLayer, 'line');
        // size
        size && layer_1.MappingLayer.size(selectStrokeLayer, size);
        // color
        color && layer_1.MappingLayer.color(selectStrokeLayer, color);
        // style
        style && layer_1.MappingLayer.style(selectStrokeLayer, style);
    }
}
//# sourceMappingURL=adaptor.js.map