"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltip = void 0;
const tslib_1 = require("tslib");
const l7_1 = require("@antv/l7");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
const util_1 = require("@antv/util");
const l7plot_component_1 = require("@antv/l7plot-component");
const lodash_es_1 = require("lodash-es");
const types_1 = require("../types");
const utils_1 = require("../utils");
const TRIGGER_LIST = ['mousemove', 'click'];
class Tooltip extends event_emitter_1.default {
    constructor(scene, interactionLayers, options) {
        super();
        /**
         * tooltip 是否可见
         */
        this.currentVisible = false;
        this.interactionTriggerHander = (event) => {
            const { feature, featureId } = event;
            const { title, customTitle, items, customItems } = this.options;
            // is GeoJson type
            const isGeoFeature = feature.type === 'Feature' && feature.geometry && feature.properties;
            // parse GeoJson properties
            const properties = isGeoFeature ? feature.properties : feature;
            let tooltipItems = [];
            if (customItems) {
                const items = customItems(feature);
                if (Array.isArray(items)) {
                    tooltipItems = items;
                }
                else {
                    throw new Error('customItems return array');
                }
            }
            else if (items) {
                items.forEach((item) => {
                    if ((0, util_1.isString)(item)) {
                        const name = item.split('.').pop() || item;
                        const value = (0, lodash_es_1.get)(properties, item);
                        if (value !== undefined) {
                            tooltipItems.push({ name, value });
                        }
                    }
                    else {
                        const { field, alias, customValue } = item;
                        const name = alias || field.split('.').pop() || field;
                        const value = (0, lodash_es_1.get)(properties, field);
                        if (value !== undefined) {
                            tooltipItems.push({
                                name,
                                value: customValue ? customValue(value, properties, featureId) : value,
                            });
                        }
                    }
                });
            }
            const componentOptions = { title: customTitle ? customTitle(properties) : title, items: tooltipItems };
            this.updateTooltip(event, componentOptions);
        };
        this.interactionUntriggerHander = () => {
            this.hideTooltip();
        };
        this.scene = scene;
        this.interactionLayers = interactionLayers;
        this.options = (0, utils_1.deepAssign)({}, this.getDefaultOptions(), options);
        const { offsets, title, showTitle, customContent, domStyles, anchor, className } = this.options;
        this.marker = new l7_1.Marker({
            offsets,
            anchor,
            draggable: false,
        });
        this.tooltipComponent = new l7plot_component_1.Tooltip({
            title,
            showTitle,
            items: [],
            customContent,
            domStyles,
            className,
        });
        this.setComponent();
        this.initInteractionEvent();
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return {
            showTitle: true,
            showComponent: true,
            items: [],
            offsets: [15, 0],
            trigger: 'mousemove',
            anchor: types_1.TooltipAnchorType['TOP-LEFT'],
        };
    }
    /**
     * 更新 tooltip 组件
     */
    update(options) {
        this.marker.remove();
        this.currentVisible = false;
        this.options = (0, utils_1.deepAssign)({}, this.options, options);
        const { offsets, showTitle, customContent, domStyles, anchor, className } = this.options;
        this.marker = new l7_1.Marker({
            offsets,
            anchor,
            draggable: false,
        });
        this.tooltipComponent.update({
            showTitle,
            customContent,
            domStyles,
            className,
        });
        this.setComponent();
    }
    initInteractionEvent() {
        const trigger = this.options.trigger || 'mousemove';
        if (!TRIGGER_LIST.includes(trigger)) {
            throw new Error('trigger is mousemove or click');
        }
        this.interactionLayers.forEach(({ layer }) => {
            layer.on(trigger, this.interactionTriggerHander);
            layer.on(`un${trigger}`, this.interactionUntriggerHander);
        });
    }
    unBindInteractionEvent() {
        const trigger = this.options.trigger || 'mousemove';
        this.interactionLayers.forEach(({ layer }) => {
            layer.off(trigger, this.interactionTriggerHander);
            layer.off(`un${trigger}`, this.interactionUntriggerHander);
        });
    }
    updateTooltip(mouseEvent, componentOptions) {
        const { lngLat, x, y } = mouseEvent;
        if (this.options.showComponent) {
            this.updateComponent(componentOptions);
            this.setPostion(lngLat);
        }
        if (this.currentVisible) {
            const event = { type: 'tooltip:change', data: componentOptions, lngLat, x, y };
            this.emit('tooltip:change', event);
        }
        else {
            this.showTooltip();
            const event = { type: 'tooltip:show', data: componentOptions, lngLat, x, y };
            this.emit('tooltip:show', event);
        }
    }
    /**
     * tooltip 添加到地图上
     */
    showTooltip() {
        if (this.currentVisible)
            return;
        if (this.options.showComponent) {
            this.scene.addMarker(this.marker);
        }
        this.currentVisible = true;
    }
    /**
     * tooltip 从地图上移除
     */
    hideTooltip() {
        if (!this.currentVisible)
            return;
        if (this.options.showComponent) {
            this.marker.remove();
        }
        this.currentVisible = false;
        const event = { type: 'tooltip:hide' };
        this.emit('tooltip:hide', event);
    }
    /**
     * 更新 tooltip 组件
     */
    updateComponent(componentOptions) {
        if (!(0, util_1.isEqual)(this.lastComponentOptions, componentOptions)) {
            this.tooltipComponent.update(componentOptions);
            this.lastComponentOptions = componentOptions;
        }
    }
    /**
     * 设置 tooltip 内容
     */
    setComponent() {
        const tooltip = this.tooltipComponent.getContainer();
        const container = window.document.createElement('div');
        container.style.cursor = 'auto';
        container.style.userSelect = 'text';
        container.className = 'l7plot-tooltip-container';
        // stopPropagation
        ['mousemove', 'mousedown', 'mouseup', 'click', 'dblclick'].forEach((type) => {
            container.addEventListener(type, (e) => e.stopPropagation());
        });
        container.appendChild(tooltip);
        this.marker.setElement(container);
    }
    /**
     * 设置 tooltip 位置
     */
    setPostion(position) {
        this.marker.setLnglat(position);
    }
    /**
     * 销毁
     */
    destroy() {
        this.unBindInteractionEvent();
        this.off();
        this.marker.remove();
        this.tooltipComponent.destroy();
    }
}
exports.Tooltip = Tooltip;
//# sourceMappingURL=tooltip.js.map