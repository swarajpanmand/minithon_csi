"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Legend = void 0;
const l7_1 = require("@antv/l7");
const l7plot_component_1 = require("@antv/l7plot-component");
class Legend extends l7_1.Control {
    constructor(options) {
        super(options);
        /**
         * legendComponents 实例
         */
        this.legendComponents = [];
        this.options = options;
        this.legendComponents = this.initLegendComponents(options.items);
    }
    initLegendComponents(legendItem) {
        const legendComponents = [];
        for (let index = 0; index < legendItem.length; index++) {
            const item = legendItem[index];
            if (item.type === 'category') {
                const legend = new l7plot_component_1.CategoryLegend({
                    title: item.options.title,
                    items: item.options.items,
                    className: item.options.className,
                    customContent: item.options.customContent,
                    domStyles: item.options.domStyles,
                });
                legendComponents.push(legend);
            }
            else if (item.type === 'continue') {
                const legend = new l7plot_component_1.ContinueLegend({
                    title: item.options.title,
                    min: item.options.min,
                    max: item.options.max,
                    colors: item.options.colors,
                    className: item.options.className,
                    customContent: item.options.customContent,
                    domStyles: item.options.domStyles,
                });
                legendComponents.push(legend);
            }
        }
        return legendComponents;
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return {
            position: 'bottomleft',
        };
    }
    onAdd() {
        const container = window.document.createElement('div');
        container.className = 'l7plot-legend-container';
        this.legendComponents.forEach((legendComponent) => {
            const legend = legendComponent.getContainer();
            container.appendChild(legend);
        });
        return container;
    }
    onRemove() {
        this.legendComponents.forEach((legendComponent) => {
            legendComponent.destroy();
        });
    }
}
exports.Legend = Legend;
//# sourceMappingURL=legend.js.map