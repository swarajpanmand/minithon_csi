"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Choropleth = void 0;
const tslib_1 = require("tslib");
const l7_1 = require("@antv/l7");
const util_1 = require("@antv/util");
const layer_group_1 = require("../../core/layer/layer-group");
const plot_1 = require("../../core/plot");
const area_layer_1 = require("../../layers/area-layer");
const text_layer_1 = require("../../layers/text-layer");
const utils_1 = require("../../utils");
const cache_1 = require("./cache");
const constants_1 = require("./constants");
const helper_1 = require("./helper");
const layer_1 = require("./layer");
class Choropleth extends plot_1.Plot {
    constructor() {
        super(...arguments);
        /**
         * 图表类型
         */
        this.type = plot_1.Plot.PlotType.Choropleth;
        /**
         * 国界数据
         */
        this.chinaBoundaryData = { type: 'FeatureCollection', features: [] };
        /**
         * 当前行政数据数据
         */
        this.currentDistrictData = { type: 'FeatureCollection', features: [] };
        /**
         * 数据钻取路径
         */
        this.drillSteps = [];
        /**
         * 钻取栈数据
         */
        this.drillStacks = [];
        /**
         * 向下钻取事件回调
         */
        this.onDrillDownHander = (event) => {
            var _a;
            const { steps, onDown } = this.options.drill;
            const properties = (_a = event.feature) === null || _a === void 0 ? void 0 : _a.properties;
            const { adcode } = properties;
            // 已经下钻到最后
            if (this.drillStacks.length === steps.length + 1) {
                return;
            }
            // 已开始下钻
            const from = this.drillStacks.slice(-1)[0];
            const depth = this.drillStacks.length - 1;
            const _b = this.drillSteps[depth], { level, granularity = constants_1.DEFAULT_AREA_GRANULARITY[level] } = _b, drillConfig = tslib_1.__rest(_b, ["level", "granularity"]);
            const downParams = {
                nativeEvent: true,
                from: { level: from.level, adcode: from.adcode, granularity: from.granularity },
                to: { level, adcode, granularity, properties },
            };
            const callback = (config = {}) => {
                const view = { level, adcode, granularity };
                const mergeConfig = (0, utils_1.deepAssign)({}, drillConfig, config);
                this.changeView(view, mergeConfig).then((drillData) => {
                    if (drillData) {
                        this.drillStacks.push(drillData);
                        this.emit('drilldown', downParams);
                    }
                });
            };
            if (onDown) {
                onDown(downParams.from, downParams.to, callback);
            }
            else {
                callback();
            }
        };
        /**
         * 向上钻取事件回调
         */
        this.onDrillUpHander = () => {
            const { onUp } = this.options.drill;
            // 已经上卷到最高层级
            const isTopDrillStack = this.drillStacks.length === 0 || this.drillStacks.length === 1;
            if (isTopDrillStack) {
                return;
            }
            const lastIndex = this.drillStacks.length - 1;
            const from = this.drillStacks[lastIndex];
            const to = this.drillStacks[lastIndex - 1];
            const upParams = {
                nativeEvent: true,
                from: { level: from.level, adcode: from.adcode, granularity: from.granularity },
                to: { level: to.level, adcode: to.adcode, granularity: to.granularity },
            };
            const callback = (config = {}) => {
                const view = upParams.to;
                const mergeConfig = (0, utils_1.deepAssign)({}, to.config, config);
                this.changeView(view, mergeConfig).then((drillData) => {
                    if (drillData) {
                        this.drillStacks.pop();
                        this.emit('drillup', upParams);
                    }
                });
            };
            if (onUp) {
                onUp(upParams.from, upParams.to, callback);
            }
            else {
                callback();
            }
        };
    }
    /**
     * 初始化数据
     */
    initSource() {
        this.getInitDistrictData().then(() => {
            this.source = this.createSource();
            this.render();
            this.inited = true;
        });
    }
    /**
     * 渲染
     */
    render() {
        if (this.inited) {
            this.scene.setEnableRender(true);
            this.scene.render();
        }
        else {
            const layerGroup = this.createLayers(this.source);
            this.layerGroup = layerGroup;
            if (this.scene['sceneService'].loaded) {
                this.onSceneLoaded();
            }
            else {
                this.scene.once('loaded', () => {
                    this.onSceneLoaded();
                });
            }
            this.initLayersEvent();
        }
    }
    /**
     * 更新: 更新配置且重新渲染
     */
    update(options) {
        var _a, _b, _c;
        this.updateOption(options);
        if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {
            this.updateMap(options.map);
        }
        // 下钻路径发生更新
        if (options.drill &&
            options.drill.enabled !== false &&
            !(0, util_1.isEqual)((_a = this.lastOptions.drill) === null || _a === void 0 ? void 0 : _a.steps, (_b = this.options.drill) === null || _b === void 0 ? void 0 : _b.steps)) {
            this.drillReset();
            this.initDrillEvent();
        }
        this.scene.setEnableRender(false);
        // 行政级别及范围发生更新
        if (options.viewLevel && !(0, util_1.isEqual)(this.lastOptions.viewLevel, this.options.viewLevel)) {
            const geoData = (_c = options.source) === null || _c === void 0 ? void 0 : _c.joinBy.geoData;
            this.getDistrictData(geoData).then(() => {
                const _a = this.options.source, { data } = _a, sourceConfig = tslib_1.__rest(_a, ["data"]);
                this.changeData(data, sourceConfig);
                this.updateLayers(options);
                this.render();
                this.updateComponents();
                this.emit('update');
            });
        }
        else {
            if (options.source && !(0, util_1.isEqual)(this.lastOptions.source, this.options.source)) {
                const _d = this.options.source, { data } = _d, sourceConfig = tslib_1.__rest(_d, ["data"]);
                this.changeData(data, sourceConfig);
            }
            this.updateLayers(options);
            this.render();
            this.updateComponents();
            this.emit('update');
        }
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return Choropleth.DefaultOptions;
    }
    /**
     * 解析 source 配置
     */
    parserSourceConfig(source) {
        const { data: joinData, joinBy } = source, sourceCFG = tslib_1.__rest(source, ["data", "joinBy"]);
        const { sourceField, geoField: targetField, geoData } = joinBy;
        const data = geoData;
        const config = { type: 'join', sourceField, targetField, data: joinData };
        if (sourceCFG.transforms) {
            sourceCFG.transforms.push(config);
        }
        else {
            sourceCFG.transforms = [config];
        }
        if (sourceCFG['parser']) {
            delete sourceCFG['parser'];
        }
        return { data, sourceCFG };
    }
    /**
     * 创建 source 实例
     */
    createSource() {
        const { data, sourceCFG } = this.parserSourceConfig(this.options.source);
        const source = new l7_1.Source(data, sourceCFG);
        return source;
    }
    /**
     * 更新: 更新数据
     */
    changeData(data, cfg) {
        this.options.source = (0, utils_1.deepAssign)({}, this.options.source, Object.assign({ data }, cfg));
        const { data: geoData, sourceCFG } = this.parserSourceConfig(this.options.source);
        this.source.setData(geoData, sourceCFG);
        this.emit('change-data');
    }
    /**
     * 创建图层
     */
    createLayers(source) {
        this.fillAreaLayer = new area_layer_1.AreaLayer(Object.assign({ name: 'fillAreaLayer', source }, (0, util_1.pick)(this.options, area_layer_1.AreaLayer.LayerOptionsKeys)));
        const layerGroup = new layer_group_1.LayerGroup([this.fillAreaLayer]);
        if (this.options.chinaBorder) {
            const layers = this.createCountryBoundaryLayer(this.chinaBoundaryData, this.options);
            layers.forEach((layer) => layerGroup.addLayer(layer));
        }
        if (this.options.label) {
            this.labelLayer = this.createLabelLayer(source, this.options.label);
            layerGroup.addLayer(this.labelLayer);
        }
        return layerGroup;
    }
    /**
     * 创建中国国界线图层
     */
    createCountryBoundaryLayer(data, plotConfig) {
        const { chinaBoundaryLayer, chinaHkmBoundaryLayer, chinaDisputeBoundaryLayer } = (0, layer_1.createCountryBoundaryLayer)(data, plotConfig);
        this.chinaBoundaryLayer = chinaBoundaryLayer;
        this.chinaHkmBoundaryLayer = chinaHkmBoundaryLayer;
        this.chinaDisputeBoundaryLayer = chinaDisputeBoundaryLayer;
        return [chinaBoundaryLayer, chinaHkmBoundaryLayer, chinaDisputeBoundaryLayer];
    }
    /**
     * 创建数据标签图层
     */
    createLabelLayer(source, label) {
        const data = source['originData'].features
            .map(({ properties }) => Object.assign({}, properties, { centroid: properties['centroid'] || properties['center'] }))
            .filter(({ centroid }) => centroid);
        const { visible, minZoom, maxZoom, zIndex = 0 } = this.options;
        const textLayer = new text_layer_1.TextLayer(Object.assign({ name: 'labelLayer', source: {
                data,
                parser: { type: 'json', coordinates: 'centroid' },
                transforms: source.transforms,
            }, visible,
            minZoom,
            maxZoom, zIndex: zIndex + 0.1 }, label));
        const updateCallback = () => {
            const data = this.source['originData'].features
                .map(({ properties }) => properties)
                .filter(({ centroid }) => centroid);
            textLayer.layer.setData(data, { transforms: source.transforms });
        };
        source.on('update', updateCallback);
        textLayer.on('remove', () => {
            source.off('update', updateCallback);
        });
        return textLayer;
    }
    /**
     * 更新图层
     */
    updateLayers(options) {
        const fillAreaLayerConfig = (0, util_1.pick)(options, area_layer_1.AreaLayer.LayerOptionsKeys);
        this.fillAreaLayer.update(fillAreaLayerConfig);
        const createCountryBoundaryLayer = () => {
            const layers = this.createCountryBoundaryLayer(this.chinaBoundaryData, this.options);
            layers.forEach((layer) => this.layerGroup.addLayer(layer));
        };
        const removeCountryBoundaryLayer = () => {
            this.chinaBoundaryLayer && this.layerGroup.removeLayer(this.chinaBoundaryLayer);
            this.chinaHkmBoundaryLayer && this.layerGroup.removeLayer(this.chinaHkmBoundaryLayer);
            this.chinaDisputeBoundaryLayer && this.layerGroup.removeLayer(this.chinaDisputeBoundaryLayer);
        };
        if (options.chinaBorder) {
            if (!this.chinaBoundaryLayer) {
                createCountryBoundaryLayer();
            }
            else {
                removeCountryBoundaryLayer();
                createCountryBoundaryLayer();
            }
        }
        else if (options.chinaBorder === false) {
            removeCountryBoundaryLayer();
        }
        this.updateLabelLayer(this.source, options.label, this.options, this.labelLayer);
    }
    /**
     * 初始化图层事件
     */
    initLayersEvent() {
        this.initDrillEvent();
        this.initLegendEvent();
    }
    /**
     * 初始化钻取事件
     */
    initDrillEvent() {
        // 更新：取消上次绑定事件
        if (this.lastOptions.drill) {
            const { triggerUp = 'unclick', triggerDown = 'click' } = this.lastOptions.drill;
            this.fillAreaLayer.off(triggerUp, this.onDrillUpHander);
            this.fillAreaLayer.off(triggerDown, this.onDrillDownHander);
        }
        // 没有下钻
        if (!this.options.drill || this.options.drill.enabled === false) {
            return;
        }
        const { steps, triggerUp = 'unclick', triggerDown = 'click' } = this.options.drill;
        const dillSteps = steps.map((step) => {
            if (typeof step === 'string') {
                return {
                    level: step,
                    granularity: constants_1.DEFAULT_AREA_GRANULARITY[step],
                };
            }
            if (!step.granularity) {
                step.granularity = constants_1.DEFAULT_AREA_GRANULARITY[step.level];
            }
            return step;
        });
        // 初始化或钻取路径更新时
        if (!(0, helper_1.isEqualDrillSteps)(dillSteps, this.drillSteps)) {
            this.drillSteps = dillSteps;
            this.drillStacks = [];
        }
        // 初始化钻取栈第一钻数据
        if (!this.drillStacks.length) {
            const { level, adcode, granularity = constants_1.DEFAULT_AREA_GRANULARITY[level] } = this.options.viewLevel;
            const config = (0, helper_1.getDrillStepDefaultConfig)(this.options);
            this.drillStacks = [{ level, adcode, granularity, config }];
        }
        // 上卷事件
        this.fillAreaLayer.on(triggerUp, this.onDrillUpHander);
        // 下钻事件
        this.fillAreaLayer.on(triggerDown, this.onDrillDownHander);
    }
    /**
     * 初始化图例事件
     */
    initLegendEvent() {
        const legend = this.options.legend;
        if (!legend)
            return;
        const onUpdateLegendData = () => {
            this.updateLegendControl(legend);
        };
        this.fillAreaLayer.on('legend:color', onUpdateLegendData);
    }
    /**
     * 重置钻取缓存数据
     */
    drillReset() {
        this.drillStacks = [];
    }
    /**
     * 获取当前已钻取层级数据
     */
    getCurrentDrillSteps() {
        const steps = this.drillStacks.map((item) => (0, util_1.pick)(item, ['level', 'adcode', 'granularity']));
        return steps;
    }
    /**
     * 实现 legend 配置项
     */
    getLegendOptions() {
        const colorLegendItems = this.fillAreaLayer.getColorLegendItems();
        if (colorLegendItems.length !== 0) {
            return { type: 'category', items: colorLegendItems };
        }
        return {};
    }
    /**
     * 请求数据
     */
    fetchData(level, adcode, granularity) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fileName = `${adcode}_${level}_${granularity}`;
            const cacheArea = (0, cache_1.getCacheArea)(fileName);
            if (cacheArea)
                return cacheArea;
            const { url, type, extension } = (0, helper_1.getGeoAreaConfig)(this.options.geoArea);
            let data;
            const customFetchGeoData = this.options.customFetchGeoData;
            if (customFetchGeoData) {
                data = yield customFetchGeoData({ url, level, adcode, granularity, extension });
            }
            else {
                const response = yield fetch(`${url}/${level}/${fileName}.${extension}`);
                data = yield response.json();
            }
            if (type === 'topojson') {
                data = (0, helper_1.topojson2geojson)(data);
            }
            (0, cache_1.registerCacheArea)(fileName, data);
            return data;
        });
    }
    /**
     * 请求初始化区域数据
     */
    getInitDistrictData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const fetchChinaBoundaryData = this.fetchData('country', '100000', 'boundary');
            const geoData = (_a = this.options.source) === null || _a === void 0 ? void 0 : _a.joinBy.geoData;
            try {
                [this.chinaBoundaryData] = yield Promise.all([fetchChinaBoundaryData, this.getDistrictData(geoData)]);
            }
            catch (err) {
                throw new Error(`Failed to get china boundary data，${err}`);
            }
        });
    }
    /**
     * 请求区域数据
     */
    getDistrictData(geoData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { level, adcode, granularity = constants_1.DEFAULT_AREA_GRANULARITY[level] } = this.options.viewLevel;
            const fetchCurrentDistrictData = geoData ? Promise.resolve(geoData) : this.fetchData(level, adcode, granularity);
            try {
                this.currentDistrictData = yield fetchCurrentDistrictData;
                this.options.source = (0, utils_1.deepAssign)({}, this.options.source, { joinBy: { geoData: this.currentDistrictData } });
            }
            catch (err) {
                throw new Error(`Failed to get district data，${err}`);
            }
        });
    }
    /**
     * 向下钻取方法
     */
    drillDown(view, config = {}) {
        const from = this.drillStacks.slice(-1)[0];
        const { level, adcode, granularity } = view;
        const downParams = {
            nativeEvent: false,
            from: { level: from.level, adcode: from.adcode, granularity: from.granularity },
            to: { level, adcode, granularity },
        };
        // TODO: remove view
        this.changeView(view, config).then((drillData) => {
            if (drillData) {
                this.drillStacks.push(drillData);
                this.emit('drilldown', downParams);
            }
        });
    }
    /**
     * 向上钻取方法
     */
    drillUp(config = {}, level) {
        // 已经上卷到最高层级
        const drillStacksLength = this.drillStacks.length;
        const isTopDrillStack = [0, 1].includes(drillStacksLength);
        if (isTopDrillStack) {
            return;
        }
        const customUpStackIndex = level ? this.drillStacks.findIndex((item) => item.level === level) : -1;
        const isCustomUp = customUpStackIndex !== -1;
        const stacksIndex = isCustomUp ? customUpStackIndex : drillStacksLength - 2;
        const _a = this.drillStacks[stacksIndex], { config: drillConfig } = _a, view = tslib_1.__rest(_a, ["config"]);
        const mergeConfig = (0, utils_1.deepAssign)({}, drillConfig, config);
        const from = this.drillStacks[this.drillStacks.length - 1];
        const upParams = {
            nativeEvent: false,
            from: { level: from.level, adcode: from.adcode, granularity: from.granularity },
            to: { level: view.level, adcode: view.adcode, granularity: view.granularity },
        };
        this.changeView(view, mergeConfig).then((drillData) => {
            if (drillData) {
                if (isCustomUp) {
                    this.drillStacks.splice(customUpStackIndex + 1);
                }
                else {
                    this.drillStacks.pop();
                }
                this.emit('drillup', upParams);
            }
        });
    }
    /**
     * 更新显示区域
     */
    changeView(view_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (view, config = {}) {
            const { level, adcode, granularity = constants_1.DEFAULT_AREA_GRANULARITY[level] } = view;
            const geoData = yield this.fetchData(level, adcode, granularity);
            if (!geoData.features.length)
                return;
            const mergeConfig = (0, utils_1.deepAssign)({}, (0, helper_1.getDrillStepDefaultConfig)(this.options), config, {
                viewLevel: { level, adcode, granularity },
                source: { joinBy: { geoData } },
            });
            this.update(mergeConfig);
            const drillData = {
                level,
                adcode,
                granularity,
                config: mergeConfig,
            };
            return drillData;
        });
    }
}
exports.Choropleth = Choropleth;
/**
 * 默认配置项
 */
Choropleth.DefaultOptions = constants_1.DEFAULT_OPTIONS;
/**
 * 地理数据地址
 */
Choropleth.GeoDataUrl = constants_1.GEO_DATA_URL;
/**
 * 行政数据地址
 */
Choropleth.GeoAreaUrl = constants_1.GEO_AREA_URL;
//# sourceMappingURL=index.js.map