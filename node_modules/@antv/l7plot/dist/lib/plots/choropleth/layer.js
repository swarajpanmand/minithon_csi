"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCountryBoundaryLayer = void 0;
const path_layer_1 = require("../../layers/path-layer");
const utils_1 = require("../../utils");
const constants_1 = require("./constants");
/**
 * 创建中国国界线图层
 */
const createCountryBoundaryLayer = (data, plotConfig) => {
    const { visible, minZoom, maxZoom, zIndex = 0, chinaBorder } = plotConfig || {};
    const borderStyle = typeof chinaBorder === 'object' ? (0, utils_1.deepAssign)({}, constants_1.CHINA_BOUNDARY_STYLE, chinaBorder) : constants_1.CHINA_BOUNDARY_STYLE;
    const chinaBoundaryFeatures = data.features.filter(({ properties }) => ['coast', 'national'].includes(properties === null || properties === void 0 ? void 0 : properties['type']));
    const disputeBoundaryFeatures = data.features.filter(({ properties }) => (properties === null || properties === void 0 ? void 0 : properties['type']) === 'dispute');
    const hkmBoundaryFeatures = data.features.filter(({ properties }) => (properties === null || properties === void 0 ? void 0 : properties['type']) === 'hkm');
    const chinaBoundaryLayer = new path_layer_1.PathLayer({
        name: 'chinaBoundaryLayer',
        visible,
        minZoom,
        maxZoom,
        zIndex: zIndex + 0.1,
        source: {
            data: { type: 'FeatureCollection', features: chinaBoundaryFeatures },
            parser: { type: 'geojson' },
        },
        color: {
            field: 'type',
            value: ({ type }) => {
                return borderStyle[type].color;
            },
        },
        size: {
            field: 'type',
            value: ({ type }) => {
                return borderStyle[type].width;
            },
        },
        style: {
            // opacity: ['type', (type) => borderStyle[type].opacity],
            // 下线 L7 暂时不支持根据字段映射样式
            opacity: borderStyle.national.opacity,
        },
    });
    const chinaHkmBoundaryLayer = new path_layer_1.PathLayer({
        name: 'chinaHkmBoundaryLayer',
        visible,
        minZoom,
        maxZoom,
        zIndex: zIndex + 0.1,
        source: {
            data: { type: 'FeatureCollection', features: hkmBoundaryFeatures },
            parser: { type: 'geojson' },
        },
        color: borderStyle.hkm.color,
        size: borderStyle.hkm.width,
        style: {
            opacity: borderStyle.hkm.opacity,
            lineType: 'dash',
            dashArray: borderStyle.hkm.dashArray,
        },
    });
    const chinaDisputeBoundaryLayer = new path_layer_1.PathLayer({
        name: 'chinaDisputeBoundaryLayer',
        visible,
        minZoom,
        maxZoom,
        zIndex: zIndex + 0.1,
        source: {
            data: { type: 'FeatureCollection', features: disputeBoundaryFeatures },
            parser: { type: 'geojson' },
        },
        color: borderStyle.dispute.color,
        size: borderStyle.dispute.width,
        style: {
            opacity: borderStyle.dispute.opacity,
            lineType: 'dash',
            dashArray: borderStyle.dispute.dashArray,
        },
    });
    return { chinaBoundaryLayer, chinaHkmBoundaryLayer, chinaDisputeBoundaryLayer };
};
exports.createCountryBoundaryLayer = createCountryBoundaryLayer;
//# sourceMappingURL=layer.js.map