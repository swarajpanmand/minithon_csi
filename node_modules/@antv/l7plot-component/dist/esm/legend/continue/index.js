import { deepMix, isString, substitute } from '@antv/util';
import { modifyCSS } from '@antv/dom-util';
import DomStyles from './theme';
import { CONTAINER_CLASS, CONTAINER_TPL, TITLE_CLASS, RIBBON_CONTAINER_CLASS, RIBBON_TPL } from './constants';
import { Component } from '../../core/component';
import { clearDom } from '../../utils/dom';
export class ContinueLegend extends Component {
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return deepMix({}, super.getDefaultOptions(), {
            id: 'l7plot-continue-legend',
            name: 'l7plot-continue-legend',
            title: '',
            containerTpl: CONTAINER_TPL,
            ribbonTpl: RIBBON_TPL,
            domStyles: DomStyles,
            className: CONTAINER_CLASS,
        });
    }
    /**
     * 初始化 container
     */
    initContainer() {
        const { customContent } = this.options;
        if (customContent) {
            const container = this.getHtmlContentNode(customContent);
            const parentContainer = this.getParentContainer();
            if (parentContainer) {
                parentContainer.appendChild(container);
            }
            return container;
        }
        else {
            return super.initContainer();
        }
    }
    /**
     * 初始化 DOM
     */
    initDom() {
        this.cacheDoms();
    }
    /**
     * 初始化事件
     */
    initEvent() {
        //
    }
    /**
     * 清理事件
     */
    removeEvent() {
        //
    }
    /**
     * 缓存 DOM
     */
    cacheDoms() {
        const container = this.container;
        const titleDom = container.getElementsByClassName(TITLE_CLASS)[0];
        const ribbonContainerDom = container.getElementsByClassName(RIBBON_CONTAINER_CLASS)[0];
        this.titleDom = titleDom;
        this.ribbonContainerDom = ribbonContainerDom;
    }
    /**
     * 绘制组件
     */
    render() {
        if (this.options.customContent) {
            this.renderCustomContent(this.options.customContent);
        }
        else {
            this.resetTitle();
            this.renderRibbon();
        }
    }
    /**
     * 显示
     */
    show() {
        const container = this.container;
        if (!container || this.destroyed)
            return;
        modifyCSS(container, {
            visibility: 'visible',
        });
    }
    /**
     * 隐藏
     */
    hide() {
        const container = this.container;
        if (!container || this.destroyed)
            return;
        modifyCSS(container, {
            visibility: 'hidden',
        });
    }
    /**
     * 更新
     */
    updateInner(options) {
        if (this.options.customContent) {
            this.renderCustomContent(this.options.customContent);
        }
        else {
            if (options.title) {
                this.resetTitle();
            }
            if (options.colors) {
                this.renderRibbon();
            }
        }
        super.updateInner(options);
    }
    /**
     * 根据 customContent 渲染 DOM
     */
    renderCustomContent(customContent) {
        const parentContainer = this.container.parentNode;
        const node = this.getHtmlContentNode(customContent);
        const curContainer = this.container;
        if (parentContainer) {
            parentContainer.replaceChild(node, curContainer);
        }
        this.container = node;
        this.applyStyles();
    }
    /**
     * 生成自定义内容 DOM
     */
    getHtmlContentNode(customContent) {
        let node;
        const element = customContent(this.options.title || '', this.options.min, this.options.max, this.options.colors);
        if (isString(element)) {
            node = this.createDom(element);
        }
        else {
            node = element;
        }
        return node;
    }
    /**
     * 重置 title
     */
    resetTitle() {
        const title = this.options.title;
        if (title) {
            this.showTitle();
            this.setTitle(title);
        }
        else {
            this.hideTitle();
        }
    }
    /**
     * 显示 title
     */
    showTitle() {
        const titleDom = this.titleDom;
        if (titleDom) {
            modifyCSS(titleDom, {
                display: 'block',
            });
        }
    }
    /**
     * 隐藏 title
     */
    hideTitle() {
        const titleDom = this.titleDom;
        if (titleDom) {
            modifyCSS(titleDom, {
                display: 'none',
            });
        }
    }
    /**
     * 设置 title 内容
     */
    setTitle(content) {
        const titleDom = this.titleDom;
        if (titleDom) {
            titleDom.innerHTML = content;
        }
    }
    /**
     * 渲染色带
     */
    renderRibbon() {
        this.clearRibbonContainerDoms();
        const { min, max, colors, ribbonTpl = RIBBON_TPL } = this.options;
        const ribbonContainerDom = this.ribbonContainerDom;
        if (ribbonContainerDom) {
            const backgroundImage = `linear-gradient(to right, ${colors.join(', ')})`;
            const substituteObj = { min, max, backgroundImage };
            const domStr = substitute(ribbonTpl, substituteObj);
            const dom = this.createDom(domStr);
            ribbonContainerDom.appendChild(dom);
            this.applyChildrenStyles(ribbonContainerDom, this.options.domStyles);
        }
    }
    /**
     * 清空色带 DOM 下的 DOM 元素
     */
    clearRibbonContainerDoms() {
        if (this.ribbonContainerDom) {
            clearDom(this.ribbonContainerDom);
        }
    }
    /**
     * 清空所有
     */
    clear() {
        this.setTitle('');
        this.clearRibbonContainerDoms();
    }
}
//# sourceMappingURL=index.js.map